{"version":3,"sources":["app.js"],"names":["express","require","path","mongodb","createError","mongoose","Account","logger","session","LocalStrategy","Strategy","ship","cookieParser","config","connectionString","process","passportLocalMongoose","useUnifiedTopology","db","connection","on","console","error","bind","once","log","resourceRouter","app","recreateDB","deleteMany","appRouter","Model","yearofmanufacturing","color","save","then","selectorRouter","err","passport","authenticate","serializeUser","deserializeUser","doc","use","password","done","findOne","username","user","indexRouter","message","usersRouter","set","join","__dirname","json","urlencoded","extended","secret","resave","initialize","saveUninitialized","reseed","instance1","req","res","next","instance2","get","status","module","exports"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,SAAUC,QAAQ,YAGlBE,QAAUF,QAAQ,WAFlBC,QAAOD,QAAQ,mBAIbG,YAAcH,QAAQ,eAHxBI,aAAWJ,QAAQ,iBAKnBK,QAASL,QAAQ,oBAJjBE,sBAAkBF,QAAtB,2BAMIM,OAASN,QAAQ,UALfO,SAAUP,QAAQ,YAOlBQ,cAAgBR,QAAQ,kBAAkBS,SAE5CC,KAAOV,QAAQ,iBAPnBA,QAAIW,UAAYC,SAShB,IAAMC,iBARNC,QAAIT,IAASL,WAUbI,SAAWJ,QAAQ,aATbe,QAAAA,iBAWJ,CAVET,iBAAiB,EAYjBU,oBAAoB,IAExB,IAAIC,GAAKb,SAASc,WAElBD,GAAGE,GAAG,QAASC,QAAQC,MAAMC,KAAKF,QAAS,6BAZ3CH,GAAAM,KAAQ,OAAGvB,WAcToB,QAAQI,IAAI,gCAZd,IAAMX,YAAAA,QACJC,kBACFV,YAAkBJ,QAAC,kBACnBI,UAAAJ,QAAiBa,iBAGbG,eAAkBhB,QAAE,qBAHxByB,eAAAzB,QAAA,qBAOGmB,IAAGpB,UAkDN2B,SAAeC,aAAfD,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGAhB,KAAQkB,cAHRF,KAAAA,EAIiBG,IAqBjBnB,KAAK,CAACoB,MAAM,aAAcC,oBAAoB,KAAKC,MAAM,QAnBjDC,OAAAC,KAAaC,SAAAA,GACrBT,QAAQF,IAAA,8BADRE,MAMA,SAAAU,GACAhB,QAAAC,MAAAe,KAiBiB,IAfjBC,KAAAA,CAAAA,MAAa,UAAI7B,oBAAsB8B,KAAAA,MAAvC,WACSC,OAAAA,KAAclC,SAAAA,GACvBgC,QAASG,IAAAA,+BADTH,MAkBU,SAAAD,GAbVhB,QAAeO,MAAAA,KAAf,IAAAjB,KAAA,CAAAoB,MAAA,aAAAC,oBAAA,KAAAC,MAAA,UAAAC,OAAAC,KAAA,SAAAO,GAAArB,QAAAI,IAAA,8BAAA,MAAA,SAAAY,GAAAhB,QAAAC,MAAAe,KArBAV,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAjDAT,SAAQyB,IAAA,IAAQlC,cACdY,SAAQI,EAAImB,EAAAC,GADdvC,QAAAwC,QAAA,CAAAC,SAAAA,IAgBGZ,KAAK,SAAUa,GAZlB,OAAIC,IAAchD,EAAOoC,KAclBW,EAZHlB,EAAAA,cAAoBc,GAEpBR,EAAAA,KAAcY,GAcTH,EAAK,MAAM,EAAO,CAAEK,QAAS,wBAjBlCC,EAAAA,MAAclD,EAAQ,CAAAiD,QAAA,0BAL1B,MASIxB,SAAcW,GAkBhB,OAAOQ,EAAKR,QAVZV,IAAAyB,IAAIf,QAAKnC,KAAAmD,KAAAC,UAAA,UAAE3B,IAAAyB,IAAA,cAAA,OAEXzB,IAAAgB,IAAApC,OAAOsC,QAAoBK,IAAAA,IAAAA,QAAOK,QAAT5B,IAAAgB,IAAzB3C,QAAAwD,WAAA,CAAAC,UAAA,KACC9B,IAAAgB,IAAA/B,gBAsBHe,IAAIgB,IAAI1C,QAAQ,kBAARA,CAA2B,CArBjCyD,OAAKV,eACLW,QAAA,EAA2BT,mBAAS,KACnCvB,IAAAgB,IAAAL,SAAAsB,cAyBHjC,IAAIgB,IAAIL,SAAS9B,WAxBfmB,IAAAgB,IAAA3C,QAAW,OAAOgD,KAAlBK,KAAAC,UAAA,YAGA3B,IAAAgB,IAAA,IAAOE,aACNlB,IAbDgB,IAAA,SAAAQ,aAcCxB,IAwBCgB,IArBJ,QAAAb,WACAH,IAAIyB,IAAI,YAAahB,gBACrBT,IAAIyB,IAAI,YAAR1B,gBASEgC,SAAMf,IAAE,IAAAlC,cADyBH,QAAAiC,iBAEjCoB,SAAMnB,cAF2BlC,QAAAkC,iBAGjCqB,SAAAA,gBAAmBvD,QAAAmC,mBAyBrB,IAAAqB,QAAA,EAGKC,QAAAA,aAC8C9B,IAAAA,IAAAA,SAAK+B,EAACC,EAAAC,GAApDA,EAAA9D,YAJL,QAQEiB,IAAAA,IAAAA,SAAAA,EAAQC,EAAMe,EAAd6B,GACGC,EAAAA,OAAAA,QAAY9B,EAChB1B,QAAMoB,EAAAA,OAAAA,MAAD,gBAAOiC,EAAArC,IAAPyC,IAAA,OAAA/B,EAAA,GAAA4B,EAAAI,OAVNhC,EAAAgC,QAAA,KAWCF,EAAAA,OAAAA,WAC0CG,OAAAC,QAD1C5C","file":"app.min.js","sourcesContent":["var express = require('express');\r\nvar path = require('path');\r\nvar mongoose = require('mongoose');\r\nvar mongodb = require('mongodb');\r\nconst session = require('express-session');\r\nconst createError = require('http-errors');\r\nvar cookieParser = require('cookie-parser');\r\nvar Account =require('./models/account'); \r\nconst passportLocalMongoose = require('passport-local-mongoose');\r\nvar logger = require('morgan');\r\nvar passport = require('passport'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\n\r\nvar ship = require(\"./models/ship\");\r\nrequire('dotenv').config();\r\nconst connectionString =\r\n  process.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function () {\r\n  console.log(\"Connection to DB succeeded\")\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar appRouter = require('./routes/ship');\r\n//var gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\n\r\nvar app = express();\r\npassport.use(new LocalStrategy(\r\n  function(username, password, done) {\r\n  Account.findOne({ username: username })\r\n  .then(function (user){\r\n  if (err) { return done(err); }\r\n  if (!user) {\r\n  return done(null, false, { message: 'Incorrect username.' });\r\n  }\r\n  if (!user.validPassword(password)) {\r\n  return done(null, false, { message: 'Incorrect password.' });\r\n  }\r\n  return done(null, user);\r\n  })\r\n  .catch(function(err){\r\n  return done(err)\r\n  })\r\n  })\r\n  )\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\n\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({ \r\n  secret: 'keyboard cat', \r\n  resave: false, \r\n  saveUninitialized: false \r\n})); \r\napp.use(passport.initialize()); \r\napp.use(passport.session()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/ship', appRouter);\r\n//app.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n\r\n\r\n\r\n// passport config \r\n// Use the existing connection \r\n// The Account model  \r\n\r\npassport.use(new LocalStrategy(Account.authenticate())); \r\npassport.serializeUser(Account.serializeUser()); \r\npassport.deserializeUser(Account.deserializeUser()); \r\n\r\n\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n await ship.deleteMany();\r\n let instance1 = new\r\nship({Model:\"battleship\", yearofmanufacturing:2022,color:\"Red\"});\r\n instance1.save().then(doc=> {\r\n console.log(\"First ship details saved\")}\r\n ).catch(err=>{\r\n  console.error(err)})\r\n let instance2 = new\r\n ship({Model:\"cruiser\", yearofmanufacturing:2011,color:\"silver\"});\r\n instance2.save().then(doc=> {\r\n  console.log(\"Second ship details saved\")}\r\n  ).catch(err=>{\r\n   console.error(err)})\r\n  \r\n  let instance3 = new\r\n  ship({Model:\" destroyer\", yearofmanufacturing:2023,color:\" Blue\"});\r\n  instance3.save().then(doc=> {\r\n    console.log(\"Third ship details saved\")}\r\n    ).catch(err=>{\r\n     console.error(err)})  \r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\nmodule.exports = app;"]}