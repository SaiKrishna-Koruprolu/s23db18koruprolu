{"version":3,"sources":["app.js"],"names":["express","require","path","mongodb","createError","mongoose","passportLocalMongoose","passport","session","Strategy","use","LocalStrategy","done","Account","findOne","username","err","user","cookieParser","password","message","config","process","env","MONGO_CON","connect","connectionString","useNewUrlParser","useUnifiedTopology","connection","db","on","console","error","bind","once","validPassword","indexRouter","usersRouter","appRouter","selectorRouter","resourceRouter","app","join","urlencoded","extended","secret","resave","initialize","__dirname","recreateDB","regeneratorRuntime","async","_context","prev","next","awrap","ship","yearofmanufacturing","color","saveUninitialized","doc","log","Model","save","then","stop","authenticate","logger","serializeUser","deserializeUser","reseed","req","res","locals","instance1","status","render"],"mappings":"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","file":"app.min.js","sourcesContent":["var express = require('express');\r\nvar path = require('path');\r\nvar mongoose = require('mongoose');\r\nvar mongodb = require('mongodb');\r\nconst session = require('express-session');\r\nconst createError = require('http-errors');\r\nvar cookieParser = require('cookie-parser');\r\nconst passportLocalMongoose = require('passport-local-mongoose');\r\nvar logger = require('morgan');\r\nvar passport = require('passport'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\npassport.use(new LocalStrategy( \r\n  function(username, password, done) { \r\n    Account.findOne({ username: username }, function (err, user) { \r\n      if (err) { return done(err); } \r\n      if (!user) { \r\n        return done(null, false, { message: 'Incorrect username.' }); \r\n      } \r\n      if (!user.validPassword(password)) { \r\n        return done(null, false, { message: 'Incorrect password.' }); \r\n      } \r\n      return done(null, user); \r\n    }); \r\n  }))\r\nvar ship = require(\"./models/ship\");\r\nrequire('dotenv').config();\r\nconst connectionString =\r\n  process.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function () {\r\n  console.log(\"Connection to DB succeeded\")\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar appRouter = require('./routes/ship');\r\n//var gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({ \r\n  secret: 'keyboard cat', \r\n  resave: false, \r\n  saveUninitialized: false \r\n})); \r\napp.use(passport.initialize()); \r\napp.use(passport.session()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/ship', appRouter);\r\n//app.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n// passport config \r\n// Use the existing connection \r\n// The Account model  \r\nvar Account =require('./models/account'); \r\n \r\npassport.use(new LocalStrategy(Account.authenticate())); \r\npassport.serializeUser(Account.serializeUser()); \r\npassport.deserializeUser(Account.deserializeUser()); \r\n\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n await ship.deleteMany();\r\n let instance1 = new\r\nship({Model:\"battleship\", yearofmanufacturing:2022,color:\"Red\"});\r\n instance1.save().then(doc=> {\r\n console.log(\"First ship details saved\")}\r\n ).catch(err=>{\r\n  console.error(err)})\r\n let instance2 = new\r\n ship({Model:\"cruiser\", yearofmanufacturing:2011,color:\"silver\"});\r\n instance2.save().then(doc=> {\r\n  console.log(\"Second ship details saved\")}\r\n  ).catch(err=>{\r\n   console.error(err)})\r\n  \r\n  let instance3 = new\r\n  ship({Model:\" destroyer\", yearofmanufacturing:2023,color:\" Blue\"});\r\n  instance3.save().then(doc=> {\r\n    console.log(\"Third ship details saved\")}\r\n    ).catch(err=>{\r\n     console.error(err)})  \r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\nmodule.exports = app;"]}