{"version":3,"sources":["app.js"],"names":["express","require","path","mongodb","logger","mongoose","LocalStrategy","Strategy","passport","username","password","done","cookieParser","err","user","validPassword","message","ship","config","connectionString","process","env","MONGO_CON","useUnifiedTopology","db","connection","on","error","bind","console","log","indexRouter","usersRouter","appRouter","gridbuildRouter","resourceRouter","useNewUrlParser","join","__dirname","app","use","json","once","secret","resave","saveUninitialized","initialize","session","selectorRouter","set","recreateDB","deleteMany","Model","yearofmanufacturing","color","save","then","Account","doc","serializeUser","deserializeUser","authenticate","urlencoded","extended","reseed","req","res","next","createError","instance1"],"mappings":"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","file":"app.min.js","sourcesContent":["var express = require('express');\r\nvar path = require('path');\r\nvar mongoose = require('mongoose');\r\nvar mongodb = require('mongodb');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nvar passport = require('passport'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\npassport.use(new LocalStrategy( \r\n  function(username, password, done) { \r\n    Account.findOne({ username: username }, function (err, user) { \r\n      if (err) { return done(err); } \r\n      if (!user) { \r\n        return done(null, false, { message: 'Incorrect username.' }); \r\n      } \r\n      if (!user.validPassword(password)) { \r\n        return done(null, false, { message: 'Incorrect password.' }); \r\n      } \r\n      return done(null, user); \r\n    }); \r\n  }))\r\nvar ship = require(\"./models/ship\");\r\nrequire('dotenv').config();\r\nconst connectionString =\r\n  process.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function () {\r\n  console.log(\"Connection to DB succeeded\")\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar appRouter = require('./routes/ship');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({ \r\n  secret: 'keyboard cat', \r\n  resave: false, \r\n  saveUninitialized: false \r\n})); \r\napp.use(passport.initialize()); \r\napp.use(passport.session()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/ship', appRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n// passport config \r\n// Use the existing connection \r\n// The Account model  \r\nvar Account =require('./models/account'); \r\n \r\npassport.use(new LocalStrategy(Account.authenticate())); \r\npassport.serializeUser(Account.serializeUser()); \r\npassport.deserializeUser(Account.deserializeUser()); \r\n\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n await ship.deleteMany();\r\n let instance1 = new\r\nship({Model:\"Hyndai Sonata\", yearofmanufacturing:2018,color:\"Red\"});\r\n instance1.save().then(doc=> {\r\n console.log(\"First ship details saved\")}\r\n ).catch(err=>{\r\n  console.error(err)})\r\n let instance2 = new\r\n ship({Model:\"crysler\", yearofmanufacturing:2019,color:\"silver\"});\r\n instance2.save().then(doc=> {\r\n  console.log(\"Second ship details saved\")}\r\n  ).catch(err=>{\r\n   console.error(err)})\r\n  \r\n  let instance3 = new\r\n  ship({Model:\" Honda\", yearofmanufacturing:2020,color:\" Blue\"});\r\n  instance3.save().then(doc=> {\r\n    console.log(\"Third ship details saved\")}\r\n    ).catch(err=>{\r\n     console.error(err)})  \r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\nmodule.exports = app;"]}