{"version":3,"sources":["app.js"],"names":["express","require","path","mongodb","createError","mongoose","Account","logger","session","LocalStrategy","Strategy","ship","cookieParser","config","connectionString","process","passportLocalMongoose","useUnifiedTopology","db","connection","on","console","error","bind","once","log","resourceRouter","recreateDB","regeneratorRuntime","async","_context","prev","next","awrap","passport","app","use","yearofmanufacturing","color","save","usersRouter","err","Model","then","doc","serializeUser","stop","password","done","findOne","username","user","indexRouter","validPassword","message","join","__dirname","urlencoded","extended","secret","saveUninitialized","initialize","appRouter","selectorRouter","authenticate","deserializeUser","reseed","instance1","res","locals","get","status","module","exports"],"mappings":"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","file":"app.min.js","sourcesContent":["var express = require('express');\r\nvar path = require('path');\r\nvar mongoose = require('mongoose');\r\nvar mongodb = require('mongodb');\r\nconst session = require('express-session');\r\nconst createError = require('http-errors');\r\nvar cookieParser = require('cookie-parser');\r\nvar Account =require('./models/account'); \r\nconst passportLocalMongoose = require('passport-local-mongoose');\r\nvar logger = require('morgan');\r\nvar passport = require('passport'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\n\r\nvar ship = require(\"./models/ship\");\r\nrequire('dotenv').config();\r\nconst connectionString =\r\n  process.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function () {\r\n  console.log(\"Connection to DB succeeded\")\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar appRouter = require('./routes/ship');\r\n//var gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\n\r\nvar app = express();\r\npassport.use(new LocalStrategy( \r\n  function(username, password, done) { \r\n    Account.findOne({ username: username }, function (err, user) { \r\n      if (err) { return done(err); } \r\n      if (!user) { \r\n        return done(null, false, { message: 'Incorrect username.' }); \r\n      } \r\n      if (!user.validPassword(password)) { \r\n        return done(null, false, { message: 'Incorrect password.' }); \r\n      } \r\n      return done(null, user); \r\n    }); \r\n  }))\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\n\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({ \r\n  secret: 'keyboard cat', \r\n  resave: false, \r\n  saveUninitialized: false \r\n})); \r\napp.use(passport.initialize()); \r\napp.use(passport.session()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/ship', appRouter);\r\n//app.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n\r\n\r\n\r\n// passport config \r\n// Use the existing connection \r\n// The Account model  \r\n\r\npassport.use(new LocalStrategy(Account.authenticate())); \r\npassport.serializeUser(Account.serializeUser()); \r\npassport.deserializeUser(Account.deserializeUser()); \r\n\r\n\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n await ship.deleteMany();\r\n let instance1 = new\r\nship({Model:\"battleship\", yearofmanufacturing:2022,color:\"Red\"});\r\n instance1.save().then(doc=> {\r\n console.log(\"First ship details saved\")}\r\n ).catch(err=>{\r\n  console.error(err)})\r\n let instance2 = new\r\n ship({Model:\"cruiser\", yearofmanufacturing:2011,color:\"silver\"});\r\n instance2.save().then(doc=> {\r\n  console.log(\"Second ship details saved\")}\r\n  ).catch(err=>{\r\n   console.error(err)})\r\n  \r\n  let instance3 = new\r\n  ship({Model:\" destroyer\", yearofmanufacturing:2023,color:\" Blue\"});\r\n  instance3.save().then(doc=> {\r\n    console.log(\"Third ship details saved\")}\r\n    ).catch(err=>{\r\n     console.error(err)})  \r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\nmodule.exports = app;"]}