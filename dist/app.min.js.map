{"version":3,"sources":["app.js"],"names":["express","require","path","mongodb","cookieParser","mongoose","logger","LocalStrategy","Strategy","passport","session","username","password","done","err","user","passportLocalMongoose","validPassword","message","Account","findOne","connectionString","process","MONGO_CON","connect","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","once","log","indexRouter","usersRouter","appRouter","selectorRouter","resourceRouter","join","__dirname","app","use","json","extended","secret","saveUninitialized","initialize","set","deleteMany","yearofmanufacturing","color","save","then","doc","Model","ship","serializeUser","authenticate","urlencoded","deserializeUser","reseed","recreateDB","req","res","next","createError","instance1","get","status","module","exports"],"mappings":"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","file":"app.min.js","sourcesContent":["var express = require('express');\r\nvar path = require('path');\r\nvar mongoose = require('mongoose');\r\nvar mongodb = require('mongodb');\r\nconst session = require('express-session');\r\nvar cookieParser = require('cookie-parser');\r\nconst passportLocalMongoose = require('passport-local-mongoose');\r\nvar logger = require('morgan');\r\nvar passport = require('passport'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\npassport.use(new LocalStrategy( \r\n  function(username, password, done) { \r\n    Account.findOne({ username: username }, function (err, user) { \r\n      if (err) { return done(err); } \r\n      if (!user) { \r\n        return done(null, false, { message: 'Incorrect username.' }); \r\n      } \r\n      if (!user.validPassword(password)) { \r\n        return done(null, false, { message: 'Incorrect password.' }); \r\n      } \r\n      return done(null, user); \r\n    }); \r\n  }))\r\nvar ship = require(\"./models/ship\");\r\nrequire('dotenv').config();\r\nconst connectionString =\r\n  process.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function () {\r\n  console.log(\"Connection to DB succeeded\")\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar appRouter = require('./routes/ship');\r\n//var gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({ \r\n  secret: 'keyboard cat', \r\n  resave: false, \r\n  saveUninitialized: false \r\n})); \r\napp.use(passport.initialize()); \r\napp.use(passport.session()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/ship', appRouter);\r\n//app.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n// passport config \r\n// Use the existing connection \r\n// The Account model  \r\nvar Account =require('./models/account'); \r\n \r\npassport.use(new LocalStrategy(Account.authenticate())); \r\npassport.serializeUser(Account.serializeUser()); \r\npassport.deserializeUser(Account.deserializeUser()); \r\n\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n await ship.deleteMany();\r\n let instance1 = new\r\nship({Model:\"battleship\", yearofmanufacturing:2022,color:\"Red\"});\r\n instance1.save().then(doc=> {\r\n console.log(\"First ship details saved\")}\r\n ).catch(err=>{\r\n  console.error(err)})\r\n let instance2 = new\r\n ship({Model:\"cruiser\", yearofmanufacturing:2011,color:\"silver\"});\r\n instance2.save().then(doc=> {\r\n  console.log(\"Second ship details saved\")}\r\n  ).catch(err=>{\r\n   console.error(err)})\r\n  \r\n  let instance3 = new\r\n  ship({Model:\" destroyer\", yearofmanufacturing:2023,color:\" Blue\"});\r\n  instance3.save().then(doc=> {\r\n    console.log(\"Third ship details saved\")}\r\n    ).catch(err=>{\r\n     console.error(err)})  \r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\nmodule.exports = app;"]}