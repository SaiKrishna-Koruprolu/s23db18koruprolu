{"version":3,"sources":["ship.js"],"names":["ship","require","exports","ship_list","req","res","send","regeneratorRuntime","async","_context","prev","next","console","log","params","id","awrap","findById","result","sent","ship_detail","t0","status","concat","stop","_context2","find","theships","ship_create_post","document","_result","_context3","body","Model","color","save","ship_delete","toUpdate","_result2","_context4","JSON","stringify","yearofmanufacturing","render","title","results","_context6","findByIdAndDelete","ship_view_one_Page","_context7","query","toShow","ship_update_put","err","ship_update_Page","_result3","_context8","_context9"],"mappings":"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","file":"ship.min.js","sourcesContent":["var ship = require('../models/ship');\r\n// List of all ships\r\nexports.ship_list = function(req, res) {\r\n    res.send('NOT IMPLEMENTED: ship list');\r\n};\r\n// for a specific ship. \r\nexports.ship_detail = async function(req, res) { \r\n    console.log(\"detail\"  + req.params.id) \r\n    try { \r\n        result = await ship.findById( req.params.id) \r\n        res.send(result) \r\n    } catch (error) { \r\n        res.status(500) \r\n        res.send(`{\"error\": document for id ${req.params.id} not found`); \r\n    } \r\n}; \r\nexports.ship_list = async function(req, res) {\r\n\r\n    try{\r\n\r\n        theships = await ship.find();\r\n\r\n        res.send(theships);\r\n\r\n    }\r\n\r\n    catch(err){\r\n\r\n        res.status(500);\r\n\r\n        res.send(`{\"error\": ${err}}`);\r\n\r\n    }  \r\n\r\n};\r\n// Handle ship create on POST.\r\nexports.ship_create_post = async function(req, res) {\r\n    console.log(req.body)\r\n    let document = new ship();\r\n    document.Model = req.body.Model;\r\n    document.yearofmanufacturing = req.body.yearofmanufacturing;\r\n    document.color = req.body.color;\r\n    try{\r\n        let result = await document.save();\r\n        res.send(result);\r\n    }\r\n    catch(err){\r\n        res.status(500);\r\n        res.send(`{\"error\": ${err}}`);\r\n    }  \r\n};\r\n\r\n// Handle ship delete form on DELETE.\r\nexports.ship_delete = function(req, res) {\r\n    res.send('NOT IMPLEMENTED: ship delete DELETE ' + req.params.id);\r\n};\r\n\r\n//Handle ship update form on PUT. \r\nexports.ship_update_put = async function(req, res) { \r\n    console.log(`update on id ${req.params.id} with body \r\n${JSON.stringify(req.body)}`) \r\n    try { \r\n        let toUpdate = await ship.findById( req.params.id) \r\n        // Do updates of properties \r\n        if(req.body.Model)  \r\n               toUpdate.Model = req.body.Model; \r\n        if(req.body.yearofmanufacturing) toUpdate.yearofmanufacturing = req.body.yearofmanufacturing; \r\n        if(req.body.color) toUpdate.color = req.body.color; \r\n        let result = await toUpdate.save(); \r\n        console.log(\"Sucess \" + result) \r\n        res.send(result) \r\n    } catch (err) { \r\n        res.status(500) \r\n        res.send(`{\"error\": ${err}: Update for id ${req.params.id} \r\nfailed`); \r\n    } \r\n}; \r\n\r\n// VIEWS\r\n// Handle a show all view\r\n\r\nexports.ship_view_all_Page = async function(req, res) {\r\n    try{\r\n        theships = await ship.find();\r\n        res.render('ship', { title: 'ship Search Results', results: theships});\r\n    }\r\n    catch(err){\r\n        res.status(500);\r\n        res.send(`{\"error\": ${err}}`);\r\n    }  \r\n};\r\n// Handle ship delete on DELETE. \r\nexports.ship_delete = async function(req, res) { \r\n    console.log(\"delete \"  + req.params.id) \r\n    try { \r\n        result = await ship.findByIdAndDelete( req.params.id) \r\n        console.log(\"Removed \" + result) \r\n        res.send(result) \r\n    } catch (err) { \r\n        res.status(500) \r\n        res.send(`{\"error\": Error deleting ${err}}`); \r\n    } \r\n}; \r\n// Handle a show one view with id specified by query \r\nexports.ship_view_one_Page = async function(req, res) { \r\n    console.log(\"single view for id \"  + req.query.id) \r\n    try{ \r\n        result = await ship.findById( req.query.id) \r\n        res.render('shipdetail',  \r\n{ title: 'ship Detail', toShow: result }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle building the view for creating a ship. \r\n// No body, no in path parameter, no query. \r\n// Does not need to be async \r\nexports.ship_create_Page =  function(req, res) { \r\n    console.log(\"create view\") \r\n    try{ \r\n        res.render('shipcreate', { title: 'ship Create'}); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle building the view for updating a ship. \r\n// query provides the id \r\nexports.ship_update_Page =  async function(req, res) { \r\n    console.log(\"update view for item \"+req.query.id) \r\n    try{ \r\n        let result = await ship.findById(req.query.id) \r\n        res.render('shipupdate', { title: 'ship Update', toShow: result }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle a delete one view with id from query \r\nexports.ship_delete_Page = async function(req, res) { \r\n    console.log(\"Delete view for id \"  + req.query.id) \r\n    try{ \r\n        result = await ship.findById(req.query.id) \r\n        res.render('shipdelete', { title: 'ship Delete', toShow: \r\nresult }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n "]}