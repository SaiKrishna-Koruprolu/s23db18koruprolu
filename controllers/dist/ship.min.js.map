{"version":3,"sources":["ship.js"],"names":["ship","require","exports","ship_list","req","res","send","regeneratorRuntime","async","_context","prev","next","console","log","params","id","awrap","findById","result","sent","ship_detail","t0","status","concat","stop","_context2","find","theships","ship_create_post","document","_result","_context3","body","Model","color","save","ship_delete","_context4","findByIdAndDelete","ship_update_put","toUpdate","_result2","_context5","JSON","stringify","yearofmanufacturing","ship_view_all_Page","_context6","render","title","results","_context7","_context8","query","toShow","err","_result3","_context9","ship_delete_Page","_context10","_context11","ship_view_one_Page","_context12","ship_create_Page","ship_update_Page","_result4","_context13","_context14","_context15"],"mappings":"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","file":"ship.min.js","sourcesContent":["var ship = require('../models/ship');\r\n// List of all ships\r\nexports.ship_list = function(req, res) {\r\n    res.send('NOT IMPLEMENTED: ship list');\r\n};\r\n// for a specific ship. \r\nexports.ship_detail = async function(req, res) { \r\n    console.log(\"detail\"  + req.params.id) \r\n    try { \r\n        result = await ship.findById( req.params.id) \r\n        res.send(result) \r\n    } catch (error) { \r\n        res.status(500) \r\n        res.send(`{\"error\": document for id ${req.params.id} not found`); \r\n    } \r\n}; \r\nexports.ship_list = async function(req, res) {\r\n\r\n    try{\r\n\r\n        theships = await ship.find();\r\n\r\n        res.send(theships);\r\n\r\n    }\r\n\r\n    catch(err){\r\n\r\n        res.status(500);\r\n\r\n        res.send(`{\"error\": ${err}}`);\r\n\r\n    }  \r\n\r\n};\r\n// Handle ship create on POST.\r\nexports.ship_create_post = async function(req, res) {\r\n    console.log(req.body)\r\n    let document = new ship();\r\n    document.Model = req.body.Model;\r\n    document.yearofmanufacturing = req.body.yearofmanufacturing;\r\n    document.color = req.body.color;\r\n    try{\r\n        let result = await document.save();\r\n        res.send(result);\r\n    }\r\n    catch(err){\r\n        res.status(500);\r\n        res.send(`{\"error\": ${err}}`);\r\n    }  \r\n};\r\n\r\n// Handle ship delete form on DELETE.\r\nexports.ship_delete = async function(req, res) {\r\n    console.log(\"delete \" + req.params.id)\r\n    try {\r\n    result = await ship.findByIdAndDelete( req.params.id)\r\n    console.log(\"Removed \" + result)\r\n    res.send(result)\r\n    } catch (err) {\r\n    res.status(500)\r\n    res.send(`{\"error\": Error deleting ${err}}`);\r\n    }\r\n    };\r\n\r\n//Handle ship update form on PUT\r\nexports.ship_update_put = async function(req, res) {\r\n    console.log(`update on id ${req.params.id} with body\r\n    ${JSON.stringify(req.body)}`)\r\n    try {\r\n    let toUpdate = await ship.findById( req.params.id)\r\n    // Do updates of properties\r\n    if(req.body.ship)\r\n    toUpdate.Model = req.body.Model;\r\n    if(req.body.yearofmanufacturing) toUpdate.yearofmanufacturing = req.body.yearofmanufacturing;\r\n    if(req.body.color) toUpdate.color = req.body.color;\r\n    let result = await toUpdate.save();\r\n    console.log(\"Sucess \" + result)\r\n    res.send(result)\r\n    } catch (err) {\r\n    res.status(500)\r\n    res.send(`{\"error\": ${err}: Update for id ${req.params.id}\r\n    failed`);\r\n    }\r\n    };\r\n\r\n// VIEWS\r\n// Handle a show all view\r\n\r\nexports.ship_view_all_Page = async function(req, res) {\r\n    try{\r\n        theships = await ship.find();\r\n        res.render('ship', { title: 'ship Search Results', results: theships});\r\n    }\r\n    catch(err){\r\n        res.status(500);\r\n        res.send(`{\"error\": ${err}}`);\r\n    }  \r\n};\r\n// Handle ship delete on DELETE. \r\nexports.ship_delete = async function(req, res) { \r\n    console.log(\"delete \"  + req.params.id) \r\n    try { \r\n        result = await ship.findByIdAndDelete( req.params.id) \r\n        console.log(\"Removed \" + result) \r\n        res.send(result) \r\n    } catch (err) { \r\n        res.status(500) \r\n        res.send(`{\"error\": Error deleting ${err}}`); \r\n    } \r\n}; \r\n// Handle a show one view with id specified by query \r\nexports.ship_view_one_Page = async function(req, res) { \r\n    console.log(\"single view for id \"  + req.query.id) \r\n    try{ \r\n        result = await ship.findById( req.query.id) \r\n        res.render('shipdetail',  \r\n{ title: 'ship Detail', toShow: result }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle building the view for creating a ship. \r\n// No body, no in path parameter, no query. \r\n// Does not need to be async \r\nexports.ship_create_Page =  function(req, res) { \r\n    console.log(\"create view\") \r\n    try{ \r\n        res.render('shipcreate', { title: 'ship Create'}); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle building the view for updating a ship. \r\n// query provides the id \r\nexports.ship_update_Page =  async function(req, res) { \r\n    console.log(\"update view for item \"+req.query.id) \r\n    try{ \r\n        let result = await ship.findById(req.query.id) \r\n        res.render('shipupdate', { title: 'ship Update', toShow: result }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n// Handle a delete one view with id from query \r\nexports.ship_delete_Page = async function(req, res) { \r\n    console.log(\"Delete view for id \"  + req.query.id) \r\n    try{ \r\n        result = await ship.findById(req.query.id) \r\n        res.render('shipdelete', { title: 'ship Delete', toShow: \r\nresult }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n // for a specific ship.\r\nexports.ship_detail = async function(req, res) {\r\n    console.log(\"detail\" + req.params.id)\r\n    try {\r\n    result = await ship.findById( req.params.id)\r\n    res.send(result)\r\n    } catch (error) {\r\n    res.status(500)\r\n    res.send(`{\"error\": document for id ${req.params.id} not found`);\r\n    }\r\n    };\r\n    // Handle a show one view with id specified by query\r\nexports.ship_view_one_Page = async function(req, res) {\r\n    console.log(\"single view for id \" + req.query.id)\r\n    try{\r\n    result = await ship.findById(req.query.id)\r\n    res.render('shipdetail',\r\n    { title: 'ship Detail', toShow: result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n    // Handle building the view for creating a ship.\r\n// No body, no in path parameter, no query.\r\n// Does not need to be async\r\nexports.ship_create_Page = function(req, res) {\r\n    console.log(\"create view\")\r\n    try{\r\n    res.render('shipcreate', { title: 'ship Create'});\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n    // Handle building the view for updating a ship.\r\n// query provides the id\r\nexports.ship_update_Page = async function(req, res) {\r\n    console.log(\"update view for item \"+req.query.id)\r\n    try{\r\n    let result = await ship.findById(req.query.id)\r\n    res.render('shipupdate', { title: 'ship Update', toShow: result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n    // Handle a delete one view with id from query\r\nexports.ship_delete_Page = async function(req, res) {\r\n    console.log(\"Delete view for id \" + req.query.id)\r\n    try{\r\n    result = await ship.findById(req.query.id)\r\n    res.render('shipdelete', { title: 'ship Delete', toShow:\r\n    result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n    // Handle a show one view with id specified by query\r\nexports.ship_view_one_Page = async function(req, res) {\r\n    console.log(\"single view for id \" + req.query.id)\r\n    try{\r\n    result = await ship.findById( req.query.id)\r\n    res.render('shipdetail',\r\n   { title: 'ship Detail', toShow:\r\n    result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n   };"]}